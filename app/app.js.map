{"version":3,"sources":["../src/app.js"],"names":["HOME","resolve","__dirname","BASHSCRIPT","config","app","use","urlencoded","extended","json","storage","diskStorage","destination","req","file","cb","process","env","FILE_DIR","filename","extArray","mimetype","split","extension","length","Date","now","toString","hash","createHash","update","digest","uploadMulter","single","post","res","send","get","listen","SERVER_PORT","console","log"],"mappings":"AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,OAAO,eAAKC,OAAL,CAAaC,SAAb,CAAb;AACA,IAAMC,aAAa,eAAKF,OAAL,CAAaC,SAAb,EAAuB,gBAAvB,CAAnB;;AAEA;AACA;AACA;AACA;;AAEA,iBAAOE,MAAP;AACA,IAAIC,MAAM,wBAAV;AACAA,IAAIC,GAAJ,CAAQ,qBAAWC,UAAX,CAAsB,EAACC,UAAU,IAAX,EAAtB,CAAR;AACAH,IAAIC,GAAJ,CAAQ,qBAAWG,IAAX,EAAR;;AAEA,IAAIC,UAAU,iBAAOC,WAAP,CAAmB;AAC7BC,iBAAa,qBAACC,GAAD,EAAMC,IAAN,EAAYC,EAAZ,EAAkB;AAC3BA,WAAG,IAAH,EAASC,QAAQC,GAAR,CAAYC,QAArB;AACH,KAH4B;AAI7BC,cAAU,kBAACN,GAAD,EAAMC,IAAN,EAAYC,EAAZ,EAAkB;AACxB,YAAIK,WAAWN,KAAKO,QAAL,CAAcC,KAAd,CAAoB,GAApB,CAAf;AACA,YAAIC,YAAYH,SAASA,SAASI,MAAT,GAAkB,CAA3B,CAAhB;AACA,YAAIL,WAAWM,KAAKC,GAAL,GAAWC,QAAX,EAAf;AACA,YAAIC,OAAO,iBAAOC,UAAP,CAAkB,MAAlB,EAA0BC,MAA1B,CAAiCX,QAAjC,EAA2CY,MAA3C,CAAkD,KAAlD,CAAX;AACAhB,WAAG,IAAH,EAASa,OAAO,GAAP,GAAaL,SAAtB;AACH;AAV4B,CAAnB,CAAd;AAYA,IAAIS,eAAe,sBAAO,EAACtB,SAAQA,OAAT,EAAP,EAA0BuB,MAA1B,CAAiC,OAAjC,CAAnB;;AAEA5B,IAAI6B,IAAJ,CAAS,WAAT,EAAsBF,YAAtB,EAAoC,UAACnB,GAAD,EAAMsB,GAAN,EAAa;AAC/C;AACC;AACAA,QAAIC,IAAJ,CAAS,MAAT;AACF,CAJD;;AAMA/B,IAAIgC,GAAJ,CAAQ,GAAR,EAAa,UAACxB,GAAD,EAAMsB,GAAN,EAAc;AACvBA,QAAIC,IAAJ,CAAS,qBAAT;AACH,CAFD;;AAIA/B,IAAIiC,MAAJ,CAAWtB,QAAQC,GAAR,CAAYsB,WAAvB,EAAmC,YAAI;AACnCC,YAAQC,GAAR,CAAY,yBAAZ,EAAuCzB,QAAQC,GAAR,CAAYsB,WAAnD;AACH,CAFD","file":"app.js","sourcesContent":["'use strict';\r\nimport Express from 'express';\r\nimport Dotenv from 'dotenv';\r\nimport BodyParser from 'body-parser';\r\nimport Crypto from 'crypto';\r\nimport Multer from 'multer';\r\nimport Promise from 'promise';\r\nimport Fs from 'fs';\r\nimport Path from 'path';\r\nimport {spawn} from 'child_process';\r\n\r\nconst HOME = Path.resolve(__dirname);\r\nconst BASHSCRIPT = Path.resolve(__dirname,'../bash/run.sh');\r\n\r\n// const bashCall = spawn(BASHSCRIPT, ['first', 'path/to/image/temp.jpg']);\r\n// bashCall.stdout.on('data', (data) => {\r\n//   console.log(`stdout: ${data}`);\r\n// });\r\n\r\nDotenv.config();\r\nlet app = Express();\r\napp.use(BodyParser.urlencoded({extended: true})); \r\napp.use(BodyParser.json());\r\n\r\nlet storage = Multer.diskStorage({\r\n    destination: (req, file, cb) =>{\r\n        cb(null, process.env.FILE_DIR);\r\n    },\r\n    filename: (req, file, cb) =>{\r\n        let extArray = file.mimetype.split(\"/\");\r\n        let extension = extArray[extArray.length - 1];\r\n        let filename = Date.now().toString();\r\n        let hash = Crypto.createHash('sha1').update(filename).digest('hex');\r\n        cb(null, hash + '.' + extension);\r\n    }\r\n});\r\nlet uploadMulter = Multer({storage:storage}).single('image');\r\n\r\napp.post('/classify', uploadMulter, (req, res) =>{\r\n  //  res.status(200).json(req.file);\r\n   // Fs.unlink(req.file.path); //remove file\r\n   res.send('Done')\r\n});\r\n\r\napp.get('/', (req, res) => {\r\n    res.send('Nothing to see here')\r\n});\r\n\r\napp.listen(process.env.SERVER_PORT,()=>{\r\n    console.log('Running server on port:', process.env.SERVER_PORT);\r\n});\r\n\r\n"]}